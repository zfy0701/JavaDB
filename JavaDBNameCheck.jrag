aspect JavaDBNameCheck {
	
	eq L1ClassDecl.getOwnerClassAccess().nameType() = NameType.TYPE_NAME;
	eq L1GenericClassDecl.getOwnerClassAccess().nameType() = NameType.TYPE_NAME;

	//make geneic type visible for owner type
	eq L1GenericClassDecl.getOwnerClassAccess().lookupType(String name) {
		SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
		return !c.isEmpty() ? c : lookupType(name);
	}

	eq L2ClassDecl.getMemberParameter(int i).nameType() = NameType.TYPE_NAME;
	eq L2GenericClassDecl.getMemberParameter(int i).nameType() = NameType.TYPE_NAME;
	
	eq L2GenericClassDecl.getMemberParameter(int i).lookupType(String name) {
		SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
		return !c.isEmpty() ? c : lookupType(name);
	}

	eq ParMemberAccess.getReceiverTypeAccess().nameType() = NameType.TYPE_NAME;

	syn lazy boolean VarAccess.isParField() = isQualified() && hostType().memberParFields(qualifier().type(), name()) != null;

	syn FieldVariable VarAccess.getParFieldVar() {
		if (isParField()) {
			return hostType().memberParFields(qualifier().type(), name());
		} else return null;
	}


	syn lazy boolean MethodAccess.isParMethod() = isQualified() && hostType().memberParMethods(qualifier().type(), name(), getArgs()) != null;

	syn MethodVariable MethodAccess.getParMethodVar() {
		if (isParMethod()) {
			return hostType().memberParMethods(qualifier().type(), name(), getArgs());  //TODO query by parameters
		} else return null;
	}

	syn lazy boolean TypeDecl.isParMemberType() = false;
	eq L2ClassDecl.isParMemberType() = true;
	eq L2GenericClassDecl.isParMemberType() = true;
	eq RawClassDecl.isParMemberType() = original().isParMemberType();

	syn lazy List<MemberVariable> TypeDecl.getMemberPars() = new List();
	eq L2ClassDecl.getMemberPars() = getMemberParameters();
	eq L2GenericClassDecl.getMemberPars() = getMemberParameters();
	eq RawClassDecl.getMemberPars() = original().getMemberPars();
	eq ParClassDecl.getMemberPars() = original().getMemberPars();

	// refine VariableScope eq Expr.qualifiedLookupVariable(String name) {
	//  //      return VariableScope.Expr.qualifiedLookupVariable(name);
	//  if (type().accessibleFrom(hostType())) {
	//      //check if the field is field variable

	//      FieldVariable tmp = hostType().memberParFields(type(), name); //possibly hide the memberfields
	//      if (tmp == null)
	//          return keepAccessibleFields(type().memberFields(name));
	//      return SimpleSet.emptySet.add(tmp);
	//  }
	//  return SimpleSet.emptySet;
	// }

	refine Enums public void ClassInstanceExpr.nameCheck() {
		TypeDecl ty = type();
		if (type().isParMemberType()) {
			if (this instanceof ParMemberClassInstanceExpr == false) {
				error("class " + type().name() + " cannot be instantiated without any field argument");
			}
		} 
		refined();
	}

	refine NameCheck public void VarAccess.nameCheck() {
		if (isParField()) {
			//TODO: check subclass relation
		} else 
			refined();
	}

	refine TypeHierarchyCheck public void MethodAccess.nameCheck() {
		if (isParMethod()) {
			//TODO: check subclass relation
		} else 
			refined();
	}


	// public void ParMemberAccess.nameCheck() {
	// 	super.nameCheck();
	// 	SimpleSet decls = getTypeAccess().memberfields(getFieldName());
	// 	if (decls == null || decls.size() < 1) {
	// 		error(getFieldName() + " don't existed in class " + getTypeAccess().name());
	// 	} else if (decls.size() > 1) {
	// 		error("more than one field declare " + getFieldName() + " existed");
	// 	}
	// }

	public void ParMemberClassInstanceExpr.nameCheck() {
		super.nameCheck();
		List<MemberVariable> memberPars = type().getMemberPars();
		List<ParMemberAccess> memberArgs = this.getFieldArguments();

		//TODO CHECK STATCI METHOD
		if (memberPars.getNumChild() != memberArgs.getNumChild()) {
			error("The number of field arguments to instantiated the class cannot match the declaration.");
		} 
		else {
			for (int i = 0; i < memberArgs.getNumChild(); i++) {
				MemberVariable fv = memberPars.getChild(i);
				ParMemberAccess fa = memberArgs.getChild(i);

				if (fv instanceof FieldVariable) {
					SimpleSet decls = fv.getReceiverTypeAccess().type().memberFields(fa.getFieldName());
					if (decls.isEmpty()) {
      					error("no field named " + fv.getID() + " is accessible");
					}	
				} else {
					Collection decls = fv.getReceiverTypeAccess().type().memberMethods(fa.getFieldName());
					if (decls.isEmpty()) {
      					error("no method named " + fv.getID() + " is accessible");
					}
				}
			}
		}
	}

	rewrite PackageAccess {
    when(!duringSyntacticClassification() && hasPrevExpr() && prevExpr() instanceof VarAccess)
    to Access {
    	return new VarAccess(name(), start(), end());     	
    }
  }
}