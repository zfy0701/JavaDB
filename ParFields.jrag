aspect ParFields {

	class Pair<A, B> {
		private A first;
		private B second;

		public Pair(A first, B second) {
			super();
			this.first = first;
			this.second = second;
		}

		public int hashCode() {
			int hashFirst = first != null ? first.hashCode() : 0;
			int hashSecond = second != null ? second.hashCode() : 0;

			return (hashFirst + hashSecond) * hashSecond + hashFirst;
		}

		public boolean equals(Object other) {
			if (other instanceof Pair) {
				Pair<A, B> otherPair = (Pair<A, B>) other;
				return ((this.first == otherPair.first || (this.first != null
				&& otherPair.first != null && this.first
				.equals(otherPair.first))) && (this.second == otherPair.second || (this.second != null
				&& otherPair.second != null && this.second
				.equals(otherPair.second))));
			}

			return false;
		}

		public String toString() {
			return "(" + first + ", " + second + ")";
		}

		public A getFirst() {
			return first;
		}

		public void setFirst(A first) {
			this.first = first;
		}

		public B getSecond() {
			return second;
		}

		public void setSecond(B second) {
			this.second = second;
		}
	}


	syn lazy FieldVariable TypeDecl.localParFields(TypeDecl type, String name) =
	    localParFieldsMap().containsKey(new Pair(type, name)) ? (FieldVariable)localParFieldsMap().get(new Pair(type, name)) : null;

	syn lazy HashMap TypeDecl.localParFieldsMap() = new HashMap();

	eq L2ClassDecl.localParFieldsMap() {
		HashMap parFields = new HashMap();
		for (FieldVariable fieldVar : getMemberParameterList()) {
			parFields.put(new Pair(fieldVar.getReceiverTypeAccess().type(), fieldVar.getFieldName()), fieldVar); //NOT SURE ABOUT THIS LINE
		}
		return parFields;
	}

	eq L2GenericClassDecl.localParFieldsMap() { //todo simplify it
		HashMap parFields = new HashMap();
		for (FieldVariable fieldVar : getMemberParameterList()) {
			parFields.put(new Pair(fieldVar.getReceiverTypeAccess().type(), fieldVar.getFieldName()), fieldVar); //NOT SURE ABOUT THIS LINE
		}
		return parFields;
	}

	syn lazy FieldVariable TypeDecl.memberParFields(TypeDecl type, String name) = null;

	// member fields
	eq ClassDecl.memberParFields(TypeDecl type, String name) {
		FieldVariable field = localParFields(type, name);
		if (field != null)
			return field; // this causes hiding of fields in superclass and interfaces
		if (hasSuperclass()) {
			//TODO
		}
		return field;
	}
}

