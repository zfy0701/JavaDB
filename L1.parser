
ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER owner.o super.s? interfaces.i? class_body.b 
      {:
        return new L1ClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, o); 
      :}
  ;

ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER type_parameters.p owner.o super.s? interfaces.i? class_body.b 
      {:
        return new L1GenericClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, p, o); 
      :}
  ;

// ClassDecl class_declaration =
//     modifiers.m? CLASS IDENTIFIER LBRACK RBRACK owner.o super.s? interfaces.i? class_body.b 
//       {:
//         return new L2ClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, o); 
//       :}
//   ;

Opt owner =
    OWNEDBY class_type.c                       {: return new Opt(c); :}
  ;

Expr unary_expression = OWNEROF unary_expression.e {: return new OwnerOfExpr(e); :}
  ;


// List interfaces =
//     IMPLEMENTS interface_type_list.i           {: return i; :}
//   ;

// List interface_type_list =
//     interface_type.i                              {: return new List().add(i); :}
//   | interface_type_list.l COMMA interface_type.i  {: return l.add(i); :}
//   ;

List field_parameters =
    LT field_parameter_list_1.l {:  return l;  :}
  ;
  
List field_parameter_list =
    field_parameter_list.l COMMA field_parameter.p {:  return l.add(p);  :}
  | field_parameter.p {:  return new List().add(p);  :}
  ;
  
List field_parameter_list_1 =
    field_parameter_1.p {:  return new List().add(p);  :}
  | field_parameter_list.l COMMA field_parameter_1.p {:  return l.add(p);  :}
  ;
  
FieldVariable field_parameter =
    IDENTIFIER              {:  return new FieldVariable(new Modifiers(), IDENTIFIER, new List(), new List());  :}
//  | IDENTIFIER field_bound.l {:  return new FieldVariable(new Modifiers(), IDENTIFIER, new List(), l); :}
  ;
  
FieldVariable field_parameter_1 =
    IDENTIFIER GT             {:  return new FieldVariable(new Modifiers(), IDENTIFIER, new List(), new List());  :}
//  | IDENTIFIER field_bound_1.l {:  return new FieldVariable(new Modifiers(), IDENTIFIER, new List(), l);  :}
  ;
  
// List type_bound =
//     EXTENDS reference_type.t {:  return new List().add(t);  :}
//   | EXTENDS reference_type.t additional_bound_list.l {:  l.insertChild(t,0); return l; :}
//     ;
    
// List type_bound_1 =
//     EXTENDS reference_type_1.t {:  return new List().add(t);  :}
//   | EXTENDS reference_type.t additional_bound_list_1.l {:  l.insertChild(t,0); return l; :}
//     ;
    
// List additional_bound_list =
//     additional_bound.b additional_bound_list.l {:  l.insertChild(b,0); return l; :}
//   | additional_bound.b {:  return new List().add(b);  :}
//     ;
    
// List additional_bound_list_1 =
//     additional_bound.b additional_bound_list_1.l {:  l.insertChild(b,0); return l; :}
//   | additional_bound_1.b {:  return new List().add(b);  :}
//     ;
    
// Access additional_bound =
//     AND interface_type.t {:  return t;  :}
//   ;
  
// Access additional_bound_1 =
//     AND reference_type_1.t {:  return t;  :}
//   ;

