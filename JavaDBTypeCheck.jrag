aspect L1TypeCheck {
	public void OwnerOfExpr.typeCheck() {
		TypeDecl ty = getOperand().type();
		if (!ty.isClassDecl()) {
			error("Ownerof must have a class type as operand");
		}

		TypeDecl oty = ty.getOwnerType();
		if (oty.isUnknown()) {
			error("ownerof cannot perform on class not owned by others");
		}
	}

	refine TypeCheck public void ClassInstanceExpr.typeCheck() {
		TypeCheck.ClassInstanceExpr.typeCheck();

		TypeDecl dty = type();
	
		if (dty.hasOwnerType()) {
			TypeDecl oty = dty.getOwnerType();
			if (inStaticContext())
				error(dty.typeName() + " cannot be instantial in static context");
			if (oty != hostType() )
				error(dty.typeName() + " is owned by another class " + oty.typeName());
		}
	}

	public void ParMemberClassInstanceExpr.typeCheck() {
		super.typeCheck();

		//check the match of argument
		List<MemberVariable> fieldPars = type().getMemberPars();
		List<ParMemberAccess> fieldArgs = this.getFieldArguments();

		for (int i = 0; i < fieldArgs.getNumChild(); i++) {
			MemberVariable fv = fieldPars.getChild(i);
			ParMemberAccess fa = fieldArgs.getChild(i);

			TypeDecl ty1 = fv.getTypeAccess().type();
			TypeDecl ty2 = null;

			if (fv instanceof FieldVariable) {
				SimpleSet decls = fa.getReceiverTypeAccess().type().memberFields(fa.getFieldName());
				if (decls.size() != 1) {
					continue;
				}
				ty2 = ((FieldDeclaration) decls.iterator().next()).getTypeAccess().type();
			} else {
				MethodVariable methodVar = (MethodVariable) fv;
				Collection<MethodDecl> decls = fa.getReceiverTypeAccess().type().memberMethods(fa.getFieldName());
				for (MethodDecl method: decls) {
					
					boolean flag = true;

					if (methodVar.getNumArgumentTypes() != method.getNumParameter()) flag = false;
					else {
						for (int j = 0; j < methodVar.getNumArgumentTypes(); j++) {
							TypeDecl parType = methodVar.getArgumentTypes(j).type();
							TypeDecl argType = method.getParameter(j).getTypeAccess().type();
							
							if (!parType.equals(argType)) {
								flag = false;
								break;
							}

							
						}
					}

					if (flag) {
						ty2 = method.getTypeAccess().type(); 
						break;
					}
				}
				
				if (ty2 == null) {
					error("The method type of " + i + " cannont match the declaration");
					continue;
				}
			}
			
			if (!ty1.original().equals(ty2.original())) { //TODO use cleaner API
				error("The Type of field argument " + i + " cannot match to the declaration.");
			}

			TypeDecl rty1 = fv.getReceiverTypeAccess().type();
			TypeDecl rty2 = fa.getReceiverTypeAccess().type();
			
			if (rty1.isTypeVariable()) {
				//do substitute for rt1
				if (type() instanceof ParClassDecl) {
					ParClassDecl parType = (ParClassDecl) type();
					rty1 = parType.substitute((TypeVariable)rty1);
				} else {
					error("The class is instantiated without type argument to support the field parameters.");
				}
			}
			
			if (rty1 != null && rty2 != null && !rty2.subtype(rty1)) {
				error("The reciver type of field argument " + i + " cannot match to the declaration.");
			}
		}
	}
}