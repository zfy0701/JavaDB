aspect L1TypeCheck {
	public void OwnerOfExpr.typeCheck() {
		TypeDecl ty = getOperand().type();
		if (!ty.isClassDecl()) {
			error("Ownerof must have a class type as operand");
		}

		TypeDecl oty = ty.getOwnerType();
		if (oty.isUnknown()) {
			error("ownerof cannot perform on class not owned by others");
		}
	}

	refine TypeCheck public void ClassInstanceExpr.typeCheck() {
		TypeCheck.ClassInstanceExpr.typeCheck();

		TypeDecl dty = type();
	
		if (dty.hasOwnerType()) {
			TypeDecl oty = dty.getOwnerType();
			if (inStaticContext())
				error(dty.typeName() + " cannot be instantial in static context");
			if (oty != hostType() )
				error(dty.typeName() + " is owned by another class " + oty.typeName());
		}
	}

	refine TypeAnalysis eq VarAccess.type() {
		if (isParField()) {
			FieldVariable fieldVar = hostType().memberParFields(qualifier().type(), name());
			return fieldVar.getFieldTypeAccess().type();
		} else
			return refined();
	}

}