aspect L1TypeCheck {
	public void OwnerOfExpr.typeCheck() {
		TypeDecl ty = getOperand().type();
		if (!ty.isClassDecl()) {
			error("Ownerof must have a class type as operand");
		}

		TypeDecl oty = ty.getOwnerType();
		if (oty.isUnknown()) {
			error("ownerof cannot perform on class not owned by others");
		}
	}

	refine TypeCheck public void ClassInstanceExpr.typeCheck() {
		TypeCheck.ClassInstanceExpr.typeCheck();

		TypeDecl dty = type();
	
		if (dty.hasOwnerType()) {
			TypeDecl oty = dty.getOwnerType();
			if (inStaticContext())
				error(dty.typeName() + " cannot be instantial in static context");
			if (oty != hostType() )
				error(dty.typeName() + " is owned by another class " + oty.typeName());
		}
	}

	public void ParMemberClassInstanceExpr.typeCheck() {
		super.typeCheck();

		//check the match of argument
		List<FieldVariable> fieldPars = type().getFieldPars();
		List<ParMemberAccess> fieldArgs = this.getFieldArguments();

		for (int i = 0; i < fieldArgs.getNumChild(); i++) {
			FieldVariable fv = fieldPars.getChild(i);
			ParMemberAccess fa = fieldArgs.getChild(i);

			TypeDecl ty1 = fv.getTypeAccess().type();
			SimpleSet decls = fa.getReceiverTypeAccess().type().memberFields(fa.getFieldName());
			if (decls.size() != 1) {
//				error("we shall already fix this error");
				continue;
			}
			TypeDecl ty2 = ((FieldDeclaration) decls.iterator().next()).getTypeAccess().type();
			
			if (!ty1.original().equals(ty2.original())) { //TODO use cleaner API
				error("The Type of field argument " + i + " cannot match to the declaration.");
			}

			TypeDecl rty1 = fv.getReceiverTypeAccess().type();
			TypeDecl rty2 = fa.getReceiverTypeAccess().type();
			
			if (rty1.isTypeVariable()) {
				//do substitute for rt1
				if (type() instanceof ParClassDecl) {
					ParClassDecl parType = (ParClassDecl) type();
					rty1 = parType.substitute((TypeVariable)rty1);
				} else {
					error("The class is instantiated without type argument to support the field parameters.");
				}
			}
			
			if (rty1 != null && rty2 != null && !rty2.subtype(rty1)) {
				error("The reciver type of field argument " + i + " cannot match to the declaration.");
			}
		}
	}
}