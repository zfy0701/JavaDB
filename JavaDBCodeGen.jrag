aspect L1CodeGen {
	//TODO replace the runtime with static function call

	void OwnerOfExpr.emitOperation(CodeGeneration gen) {
		getOperand().createBCode(gen);

		String classname = "javadb.JavaDBRuntime";
		String      desc = "(Ljava/lang/Object;)Ljava/lang/Object;";
		String      name = "getParent";
		int index = gen.constantPool().addMethodref(classname, name, desc);
		gen.emit(Bytecode.INVOKESTATIC, 1).add2(index);

		gen.emitCheckCast(type());
	}

	refine CreateBCode public void ClassInstanceExpr.createBCode(CodeGeneration gen) {
		refined(gen);

		//L1: if this is the type is ownedby, then we do following
		if (!type().getOwnerType().isUnknown()) {
			gen.emitDup();

			gen.emitLoadReference(0); //push this to stack

			String classname = "javadb.JavaDBRuntime";
			String desc = "(Ljava/lang/Object;Ljava/lang/Object;)V";
			String name = "putParent";
			int index = gen.constantPool().addMethodref(classname, name, desc);
			gen.emit(Bytecode.INVOKESTATIC, -2).add2(index);
		}
	}


	refine GenericsCodegen public void VarAccess.emitStore(CodeGeneration gen) {
		if (isParField()) {
			FieldVariable fv = getParFieldVar();
			//we already have the object and the target value in the stack

			//now box the value if it is primitive, only isPrimitive seems have bugs
			if (!type().isReferenceType() && type().isPrimitive())
				type().boxed().emitBoxingOperation(gen);

			gen.emitLoadReference(0); //push this to stack

			IntegerLiteral.push(gen, fv.getPosition()); //load field name string

			String classname = "javadb.JavaDBRuntime";
			String      desc = "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;I)V";
			String      name = "setFieldValue";
			int index = gen.constantPool().addMethodref(classname, name, desc);
			gen.emit(Bytecode.INVOKESTATIC, 1).add2(index);

		} else
			refined(gen);
	}


	refine GenericsCodegen public void VarAccess.createBCode(CodeGeneration gen) {
		if (isParField()) {
			FieldVariable fv = getParFieldVar();
			gen.emitLoadReference(0); //push this to stack
			createLoadQualifier(gen); //push the object who have the field to stack

			//load field name string
			IntegerLiteral.push(gen, fv.getPosition());

			String classname = "javadb.JavaDBRuntime";
			String      desc = "(Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;";
			String      name = "getFieldValue";
			int index = gen.constantPool().addMethodref(classname, name, desc);
			gen.emit(Bytecode.INVOKESTATIC, 1).add2(index);

			//now box the value if it is primitive, only isPrimitive seems have bugs
			if (!type().isReferenceType() && type().isPrimitive()) {
				TypeDecl boxTy = type().boxed();
				gen.emitCheckCast(boxTy);
				boxTy.emitUnboxingOperation(gen);
			} else
				gen.emitCheckCast(type());

		} else
			refined(gen);
	}

	refine GenericsCodegen public void MethodAccess.createBCode(CodeGeneration gen) {
		if (isParMethod()) {
			MethodVariable mv = getParMethodVar();
			String classname = "javadb.JavaDBRuntime";
			String      desc = "(Ljava/lang/Object;Ljava/lang/Object;I[Ljava/lang/Object;)Ljava/lang/Object;";
			String      name = "callMethod";
			int call_index = gen.constantPool().addMethodref(classname, name, desc);

			gen.emitLoadReference(0);           //arg0, push this to stack
			createLoadQualifier(gen);           //arg1, receiver
			IntegerLiteral.push(gen, mv.getPosition()); //arg2, the method index

			int index_object = gen.constantPool().addClass("java/lang/Object");
			IntegerLiteral.push(gen, getNumArg());
			gen.emit(Bytecode.ANEWARRAY).add2(index_object); //arg3, the argument list

			for (int i = 0; i < getNumArg(); ++i) {
				gen.emitDup();
				IntegerLiteral.push(gen, i);

				Expr arg = getArg(i);
				arg.createBCode(gen);

				if (!arg.type().isReferenceType() && arg.type().isPrimitive()) {
					arg.type().boxed().emitBoxingOperation(gen);
				} else {
					arg.type().emitCastTo(gen, mv.getArgumentTypes(i).type());
				}

				gen.emit(Bytecode.AASTORE); //store into arg3
			}

			gen.emit(Bytecode.INVOKESTATIC, 1).add2(call_index);
		} else {
			refined(gen);
		}
	}

	public void  ParMemberClassInstanceExpr.createBCode(CodeGeneration gen) {
		super.createBCode(gen);

		//iterate and register field
		List<MemberVariable> fieldPars = type().getMemberPars();
		List<ParMemberAccess> fieldArgs = this.getMemberArguments();

		String classname = "javadb.JavaDBRuntime";
		String      desc1 = "(Ljava/lang/Object;Ljava/lang/String;ILjava/lang/String;)V";
		String      name1 = "registerField";
		int index1 = gen.constantPool().addMethodref(classname, name1, desc1);

		String      desc12 = "(Ljava/lang/Object;Ljava/lang/String;ILjava/lang/Object;I)V";
		String      name12 = "registerFieldVar";
		int index12 = gen.constantPool().addMethodref(classname, name12, desc12);


		String      desc2 = "(Ljava/lang/Object;Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V"; //TODO
		String      name2 = "registerMethod";
		int index2 = gen.constantPool().addMethodref(classname, name2, desc2);

		String      desc22 = "(Ljava/lang/Object;Ljava/lang/String;ILjava/lang/Object;I)V"; //TODO
		String      name22 = "registerMethodVar";
		int index22 = gen.constantPool().addMethodref(classname, name22, desc22);


		int index_class = gen.constantPool().addClass("java/lang/Class");
		int index_forname =  gen.constantPool().addMethodref(classname, "forNameNoException", "(Ljava/lang/String;)Ljava/lang/Class;");

		for (int i = 0; i < fieldArgs.getNumChild(); i++) {
			MemberVariable fv = fieldPars.getChild(i);
			ParMemberAccess fa = fieldArgs.getChild(i);

			gen.emitDup();                                                                  //arg0: the new object
			StringLiteral.push(gen, fa.getReceiverTypeAccess().type().fullName());          //arg1: recieve name
			IntegerLiteral.push(gen, fv.getPosition());                                     //arg2: declaration id

			MemberVariable mv = fa.getParVarAccess();
			if (mv != null) {
				gen.emitLoadReference(0);                                                       //arg3, push this to stack
				IntegerLiteral.push(gen, mv.getPosition());                                     //arg4: this's id
				gen.emit(Bytecode.INVOKESTATIC, 1).add2((fv instanceof FieldVariable)  ? index12 : index22);
			} else {
				StringLiteral.push(gen, fa.getMemberName());                                     //arg3: actual field name
				if (fv instanceof FieldVariable) {
					gen.emit(Bytecode.INVOKESTATIC, 1).add2(index1);
				} else {
					MethodVariable methodVar = (MethodVariable) fv;
					int m = methodVar.getNumArgumentTypes();
					IntegerLiteral.push(gen, m);
					gen.emit(Bytecode.ANEWARRAY).add2(index_class);

					//TODO BE TESTED
					for (int j = 0; j < m; j++) {
						gen.emitDup();
						IntegerLiteral.push(gen, j);

						StringLiteral.push(gen, methodVar.getArgumentTypes(j).type().fullName());
						gen.emit(Bytecode.INVOKESTATIC, 1).add2(index_forname);

						gen.emit(Bytecode.AASTORE);
					}

					gen.emit(Bytecode.INVOKESTATIC, 1).add2(index2);
				}
			}
		}
	}
}