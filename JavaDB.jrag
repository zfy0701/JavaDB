aspect L1 {

	eq FieldVariable.isStatic() = false;
	eq MethodVariable.isStatic() = false;


	//////////////////////// localNum

	inh lazy int ClassInstanceExpr.localNum();

	eq FieldDeclaration.getInit().localNum() {
		int localNum = 1;
		for (Iterator iter = hostType().constructors().iterator(); iter.hasNext(); ) {
			ConstructorDecl c = (ConstructorDecl)iter.next();
			int num = c.getNumParameter() == 0 ? c.localNumOfFirstParameter() :
			          c.getParameter(c.getNumParameter() - 1).localNum() + c.getParameter(c.getNumParameter() - 1).type().variableSize();
			if (num > localNum)
				localNum = num;
		}
		return localNum;
	}

	///////////////////////

	eq OwnerOfExpr.type() = getOperand().type().getOwnerType();

	refine TypeAnalysis eq VarAccess.type() {
		if (isParField()) {
			FieldVariable fieldVar = hostType().memberParFields(qualifier().type(), name());
			return fieldVar.getTypeAccess().type();
		} else
			return refined();
	}

	syn TypeDecl TypeDecl.getOwnerType() = unknownType();
	eq L1ClassDecl.getOwnerType() {
		if (!hasOwnerClassAccess()) return unknownType();
		return getOwnerClassAccess().type();
	}
	eq L1GenericClassDecl.getOwnerType() {
		if (!hasOwnerClassAccess()) return unknownType();
		return getOwnerClassAccess().type();
	}
	eq RawClassDecl.getOwnerType() = original().getOwnerType();
	eq ParClassDecl.getOwnerType() = hasOwnerType() ? substitute((TypeVariable)original().getOwnerType()) : unknownType();

	syn boolean TypeDecl.hasOwnerType() = false;
	eq L1ClassDecl.hasOwnerType() = hasOwnerClassAccess();
	eq L1GenericClassDecl.hasOwnerType() = hasOwnerClassAccess();
	eq RawClassDecl.hasOwnerType() = original().hasOwnerType();
	eq ParClassDecl.hasOwnerType() = original().hasOwnerType();
}

